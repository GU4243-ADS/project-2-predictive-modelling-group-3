light_tf_idf    <- bind_tf_idf(light_sentiment_frequency, sentiment, author, n)
dark_sentiment_frequency <- count(dark_sentiments, sentiment, author)
dark_tf_idf    <- bind_tf_idf(dark_sentiment_frequency, sentiment, author, n)
light_tf_idf$diff <-light_tf_idf$tf-dark_tf_idf$tf
light_sentiment_frequency <- count(light_sentiments, sentiment, author)
light_tf_idf    <- bind_tf_idf(light_sentiment_frequency, sentiment, author, n)
dark_sentiment_frequency <- count(dark_sentiments, sentiment, author)
dark_tf_idf    <- bind_tf_idf(dark_sentiment_frequency, sentiment, author, n)
summary(light_tf_idf)
light_tf_idf$diff <-light_tf_idf$tf-dark_tf_idf$tf
light_tf_idf$diff <- light_tf_idf$tf-dark_tf_idf$tf
single_wrd <- pronoun_wrd %>%
group_by(id) %>%
filter(pronoun =='single')
single_groups <- unique(single_wrd[,1])
plural_wrd <- pronoun_wrd %>%
group_by(id) %>%
filter(pronoun =='plural')
plural_groups <- unique(plural_wrd[,1])
single_only <- anti_join(single_groups,plural_groups)
plural_only <- anti_join(plural_groups,single_groups)
single_lines <- spooky %>%
filter(id %in% single_only$id)
plural_lines <- spooky %>%
filter(id %in% plural_only$id)
get_sentiments('nrc')
single_wrd <- unnest_tokens(single_lines, word, text)
plural_wrd <- unnest_tokens(plural_lines, word, text)
single_sentiments <- inner_join(single_wrd, get_sentiments('nrc'), by = "word")
plural_sentiments <- inner_join(plural_wrd, get_sentiments('nrc'), by = "word")
single_sentiment_frequency <- count(single_sentiments, sentiment, author)
single_tf_idf    <- bind_tf_idf(single_sentiment_frequency, sentiment, author, n)
plural_sentiment_frequency <- count(plural_sentiments, sentiment, author)
plural_tf_idf    <- bind_tf_idf(plural_sentiment_frequency, sentiment, author, n)
single_tf_idf$diff <- single_tf_idf$tf-plural_tf_idf$tf
light_tf_idf$dif <- light_tf_idf$tf-dark_tf_idf$tf
light_wrd <- light_wrd %>%
group_by(id) %>%
filter(light =='light')
light_wrd = unnest_tokens(spooky, word, text) %>%
mutate(light = (word == 'light'|word =='bright'|word=='luminous'|word=='rich'|word=='shiny'|word=='sunny'|word=='sun'|word=='burnished'|word=='flashing'|word=='glowing'|word=='shining'|word=='radiant'|word=='cloudless'|word=='polished'|word=='lustrous'|word=='white')) %>%
mutate(dark = (word == 'dark'|word=='black'|word=='grey'|word=='gray'|word=='dim'|word=='darkened'|word=='dingy'|word=='dull'|word=='foggy'|word=='gloomy'|word=='shady'|word=='shadow'|word=='somber')) %>%
unite(light, light, dark) %>%
mutate(light = fct_recode(as.factor(light), light = "TRUE_FALSE", dark = "FALSE_TRUE", na = "FALSE_FALSE")) %>%
filter(light != "na")
light_wrd <- light_wrd %>%
group_by(id) %>%
filter(light =='light')
light_groups <- unique(light_wrd[,1])
dark_wrd <- dark_wrd %>%
group_by(id) %>%
filter(light =='dark')
dark_groups <- unique(dark_wrd[,1])
light_only <- anti_join(light_groups,dark_groups)
dark_only <- anti_join(dark_groups,light_groups)
light_lines <- spooky %>%
filter(id %in% light_only$id)
dark_lines <- spooky %>%
filter(id %in% dark_only$id)
get_sentiments('nrc')
light_wrd <- unnest_tokens(light_lines, word, text)
dark_wrd <- unnest_tokens(dark_lines, word, text)
light_sentiments <- inner_join(light_wrd, get_sentiments('nrc'), by = "word")
dark_sentiments <- inner_join(dark_wrd, get_sentiments('nrc'), by = "word")
light_sentiment_frequency <- count(light_sentiments, sentiment, author)
light_tf_idf    <- bind_tf_idf(light_sentiment_frequency, sentiment, author, n)
dark_sentiment_frequency <- count(dark_sentiments, sentiment, author)
dark_tf_idf    <- bind_tf_idf(dark_sentiment_frequency, sentiment, author, n)
light_tf_idf$diff <- light_tf_idf$tf-dark_tf_idf$tf
lights_wrd = unnest_tokens(spooky, word, text) %>%
mutate(light = (word == 'light'|word =='bright'|word=='luminous'|word=='rich'|word=='shiny'|word=='sunny'|word=='sun'|word=='burnished'|word=='flashing'|word=='glowing'|word=='shining'|word=='radiant'|word=='cloudless'|word=='polished'|word=='lustrous'|word=='white')) %>%
mutate(dark = (word == 'dark'|word=='black'|word=='grey'|word=='gray'|word=='dim'|word=='darkened'|word=='dingy'|word=='dull'|word=='foggy'|word=='gloomy'|word=='shady'|word=='shadow'|word=='somber')) %>%
unite(light, light, dark) %>%
mutate(light = fct_recode(as.factor(light), light = "TRUE_FALSE", dark = "FALSE_TRUE", na = "FALSE_FALSE")) %>%
filter(light != "na")
light_wrd <- lights_wrd %>%
group_by(id) %>%
filter(light =='light')
light_groups <- unique(light_wrd[,1])
dark_wrd <- lights_wrd %>%
group_by(id) %>%
filter(light =='dark')
dark_groups <- unique(dark_wrd[,1])
light_only <- anti_join(light_groups,dark_groups)
dark_only <- anti_join(dark_groups,light_groups)
light_lines <- spooky %>%
filter(id %in% light_only$id)
dark_lines <- spooky %>%
filter(id %in% dark_only$id)
get_sentiments('nrc')
light_wrd <- unnest_tokens(light_lines, word, text)
dark_wrd <- unnest_tokens(dark_lines, word, text)
light_sentiments <- inner_join(light_wrd, get_sentiments('nrc'), by = "word")
dark_sentiments <- inner_join(dark_wrd, get_sentiments('nrc'), by = "word")
light_sentiment_frequency <- count(light_sentiments, sentiment, author)
light_tf_idf    <- bind_tf_idf(light_sentiment_frequency, sentiment, author, n)
dark_sentiment_frequency <- count(dark_sentiments, sentiment, author)
dark_tf_idf    <- bind_tf_idf(dark_sentiment_frequency, sentiment, author, n)
light_tf_idf$diff <- light_tf_idf$tf-dark_tf_idf$tf
ggplot(light_tf_idf) +
geom_col(aes(sentiment, diff, fill = author),position = "dodge") +
labs(x = NULL, y = "Difference in TF values") +
theme(axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Light - Dark Sentiment Frequency Difference")
light_wrd <- lights_wrd %>%
group_by(id) %>%
filter(light =='light')
light_groups <- unique(light_wrd[,1])
dark_wrd <- lights_wrd %>%
group_by(id) %>%
filter(light =='dark')
dark_groups <- unique(dark_wrd[,1])
light_only <- anti_join(light_groups,dark_groups)
dark_only <- anti_join(dark_groups,light_groups)
light_lines <- spooky %>%
filter(id %in% light_groups$id)
dark_lines <- spooky %>%
filter(id %in% dark_groups$id)
get_sentiments('nrc')
light_wrd <- unnest_tokens(light_lines, word, text)
dark_wrd <- unnest_tokens(dark_lines, word, text)
light_sentiments <- inner_join(light_wrd, get_sentiments('nrc'), by = "word")
dark_sentiments <- inner_join(dark_wrd, get_sentiments('nrc'), by = "word")
light_sentiment_frequency <- count(light_sentiments, sentiment, author)
light_tf_idf    <- bind_tf_idf(light_sentiment_frequency, sentiment, author, n)
dark_sentiment_frequency <- count(dark_sentiments, sentiment, author)
dark_tf_idf    <- bind_tf_idf(dark_sentiment_frequency, sentiment, author, n)
light_tf_idf$diff <- light_tf_idf$tf-dark_tf_idf$tf
ggplot(light_tf_idf) +
geom_col(aes(sentiment, diff, fill = author),position = "dodge") +
labs(x = NULL, y = "Difference in TF values") +
theme(axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Light - Dark Sentiment Frequency Difference")
author_bigrams <- count(group_by(bigrams_united, bigram, author))
all_bigrams    <- rename(count(group_by(bigrams_united, bigram)), all = n)
author_bigrams <- left_join(author_bigrams, all_bigrams, by = "bigram")
author_bigrams <- arrange(author_bigrams, desc(all))
author_bigrams <- author_bigrams[author_bigrams$all >10,]
bigrams_frequency <- count(bigrams_united, bigram, author)
bigrams_tf_idf    <- bind_tf_idf(bigrams_frequency, bigram, author, n)
bigrams_tf_idf    <- arrange(bigrams_tf_idf, desc(tf_idf))
bigrams_tf_idf    <- mutate(bigrams_tf_idf, bigram = factor(bigram, levels = rev(unique(bigram))))
bigrams_tf_idf_30 <- top_n(bigrams_tf_idf, 30, tf_idf)
ggplot(author_bigrams) +
geom_col(aes(reorder(bigram, all, FUN = min), n, fill = author)) +
xlab(NULL) +
coord_flip() +
facet_wrap(~ author) +
theme(legend.position = "none") +
labs(title = "Bigram Counts by Author")
ggplot(bigrams_tf_idf_30) +
geom_col(aes(bigram, tf_idf, fill = author)) +
labs(x = NULL, y = "TF-IDF values") +
theme(legend.position = "top", axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Bigram TF-IDF")
packages.used <- c("ggplot2", "dplyr", "tibble", "tidyr",  "stringr", "tidytext", "topicmodels", "wordcloud", "ggridges","forcats")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used, intersect(installed.packages()[,1], packages.used))
# install additional packages
if(length(packages.needed) > 0) {
install.packages(packages.needed, dependencies = TRUE, repos = 'http://cran.us.r-project.org')
}
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
library(topicmodels)
library(wordcloud)
library(ggridges)
library(forcats)
source("../lib/multiplot.R")
spooky <- read.csv('../data/spooky.csv', as.is = TRUE)
spooky_wrd <- unnest_tokens(spooky, word, text)
spooky_wrd <- anti_join(spooky_wrd, stop_words, by = "word")
#bigrams
spooky_bigrams <- unnest_tokens(spooky, bigram, text, token = "ngrams", n = 2)
bigrams_separated <- separate(spooky_bigrams,bigram, c("word1", "word2"), sep = " ")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
#trigrams
spooky_trigrams <- unnest_tokens(spooky, trigram, text, token = "ngrams", n = 3)
trigrams_separated <- separate(spooky_trigrams,trigram, c("word1", "word2", "word3"), sep = " ")
trigrams_filtered <- trigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word)
trigrams_united <- trigrams_filtered %>%
unite(trigram, word1, word2, word3, sep = " ")
author_words <- count(group_by(spooky_wrd, word, author))
all_words    <- rename(count(group_by(spooky_wrd, word)), all = n)
author_words <- left_join(author_words, all_words, by = "word")
author_words <- arrange(author_words, desc(all))
author_words <- ungroup(head(author_words, 81))
ggplot(author_words) +
geom_col(aes(reorder(word, all, FUN = min), n, fill = author)) +
xlab(NULL) +
coord_flip() +
facet_wrap(~ author) +
theme(legend.position = "none")
labs(title = 'Unigram Counts')
author_words <- count(group_by(spooky_wrd, word, author))
all_words    <- rename(count(group_by(spooky_wrd, word)), all = n)
author_words <- left_join(author_words, all_words, by = "word")
author_words <- arrange(author_words, desc(all))
author_words <- ungroup(head(author_words, 81))
#png('../figs/unigram_counts.png')
ggplot(author_words) +
geom_col(aes(reorder(word, all, FUN = min), n, fill = author)) +
xlab(NULL) +
coord_flip() +
facet_wrap(~ author) +
theme(legend.position = "none") +
labs(title = 'Unigram Counts')
author_words <- count(group_by(spooky_wrd, word, author))
all_words    <- rename(count(group_by(spooky_wrd, word)), all = n)
author_words <- left_join(author_words, all_words, by = "word")
author_words <- arrange(author_words, desc(all))
author_words <- ungroup(head(author_words, 81))
ggplot(author_words) +
geom_col(aes(reorder(word, all, FUN = min), n, fill = author)) +
xlab(NULL) +
coord_flip() +
facet_wrap(~ author) +
theme(legend.position = "none") +
labs(title = 'Unigram Counts')
ggsave('../figs/unigram_counts.png)
ggsave('unigram_counts.png',path='../figs/')
ggsave(unigram_counts.png,path='../figs/')
ggsave('unigram_counts.png',path='../figs')
author_bigrams <- count(group_by(bigrams_united, bigram, author))
all_bigrams    <- rename(count(group_by(bigrams_united, bigram)), all = n)
author_bigrams <- left_join(author_bigrams, all_bigrams, by = "bigram")
author_bigrams <- arrange(author_bigrams, desc(all))
author_bigrams <- author_bigrams[author_bigrams$all >10,]
bigrams_frequency <- count(bigrams_united, bigram, author)
bigrams_tf_idf    <- bind_tf_idf(bigrams_frequency, bigram, author, n)
bigrams_tf_idf    <- arrange(bigrams_tf_idf, desc(tf_idf))
bigrams_tf_idf    <- mutate(bigrams_tf_idf, bigram = factor(bigram, levels = rev(unique(bigram))))
bigrams_tf_idf_30 <- top_n(bigrams_tf_idf, 30, tf_idf)
ggplot(author_bigrams) +
geom_col(aes(reorder(bigram, all, FUN = min), n, fill = author)) +
xlab(NULL) +
coord_flip() +
facet_wrap(~ author) +
theme(legend.position = "none") +
labs(title = "Bigram Counts by Author")
ggplot(bigrams_tf_idf_30) +
geom_col(aes(bigram, tf_idf, fill = author)) +
labs(x = NULL, y = "TF-IDF values") +
theme(legend.position = "top", axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Bigram TF-IDF")
ggplot(author_bigrams) +
geom_col(aes(reorder(bigram, all, FUN = min), n, fill = author)) +
xlab(NULL) +
coord_flip() +
facet_wrap(~ author) +
theme(legend.position = "none") +
labs(title = "Bigram Counts by Author")
ggsave('bigram_counts.png',path='../figs')
ggplot(bigrams_tf_idf_30) +
geom_col(aes(bigram, tf_idf, fill = author)) +
labs(x = NULL, y = "TF-IDF values") +
theme(legend.position = "top", axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Bigram TF-IDF")
ggsave('bigram_tfidf.png',path='../figs')
author_trigrams <- count(group_by(trigrams_united, trigram, author))
all_trigrams    <- rename(count(group_by(trigrams_united, trigram)), all = n)
author_trigrams <- left_join(author_trigrams, all_trigrams, by = "trigram")
author_trigrams <- ungroup(author_trigrams[author_trigrams$all>3,])
trigrams_frequency <- count(trigrams_united, trigram, author)
trigrams_tf_idf    <- bind_tf_idf(trigrams_frequency, trigram, author, n)
trigrams_tf_idf    <- arrange(trigrams_tf_idf, desc(tf_idf))
trigrams_tf_idf    <- mutate(trigrams_tf_idf, trigram = factor(trigram, levels = rev(unique(trigram))))
trigrams_tf_idf_30 <- top_n(trigrams_tf_idf, 20, tf_idf)
ggplot(author_trigrams) +
geom_col(aes(reorder(trigram, all, FUN = min), n, fill = author)) +
xlab(NULL) +
coord_flip() +
facet_wrap(~ author) +
theme(legend.position = "none") +
labs(title = "Trigram Frequencies")
ggsave('trigram_counts.png',path='../figs')
ggplot(trigrams_tf_idf_30) +
geom_col(aes(trigram, tf_idf, fill = author)) +
labs(x = NULL, y = "TF-IDF values") +
theme(legend.position = "top", axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Trigram TF-IDF")
ggsave('trigram_tfidf.png',path='../figs')
gender_wrd = unnest_tokens(spooky, word, text) %>%
mutate(male = (word == 'he'| word == 'him'| word == 'his'|word =='man' |word == 'gentleman'|word == 'boy'|word=='himself')) %>%
mutate(female = (word == 'she' | word == 'her'| word == 'hers'|word =='woman'|word == 'lady'|word == 'girl'|word=='herself')) %>%
unite(sex, male, female) %>%
mutate(sex = fct_recode(as.factor(sex), male = "TRUE_FALSE", female = "FALSE_TRUE", na = "FALSE_FALSE")) %>%
filter(sex != "na")
gender_frequency <- count(gender_wrd, sex, author)
gender_tf_idf    <- bind_tf_idf(gender_frequency, sex, author, n)
ggplot(gender_wrd,aes(sex, fill = author)) +
labs(x = "Genders") +
geom_bar(position = "dodge") +
labs(title = "Gender Counts")
ggplot(gender_tf_idf) +
geom_col(aes(sex, tf, fill = author),position = "dodge") +
labs(x = NULL, y = "TF-IDF values") +
theme(legend.position = "top", axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Gender Frequency")
gender_wrd = unnest_tokens(spooky, word, text) %>%
mutate(male = (word == 'he'| word == 'him'| word == 'his'|word =='man' |word == 'gentleman'|word == 'boy'|word=='himself')) %>%
mutate(female = (word == 'she' | word == 'her'| word == 'hers'|word =='woman'|word == 'lady'|word == 'girl'|word=='herself')) %>%
unite(sex, male, female) %>%
mutate(sex = fct_recode(as.factor(sex), male = "TRUE_FALSE", female = "FALSE_TRUE", na = "FALSE_FALSE")) %>%
filter(sex != "na")
gender_frequency <- count(gender_wrd, sex, author)
gender_tf_idf    <- bind_tf_idf(gender_frequency, sex, author, n)
ggplot(gender_tf_idf) +
geom_col(aes(sex, tf, fill = author),position = "dodge") +
labs(x = NULL, y = "TF-IDF values") +
theme(legend.position = "top", axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Gender Frequency")
ggsave('gender_frequency.png',path='../figs')
male_wrd <- gender_wrd %>%
group_by(id) %>%
filter(sex =='male')
male_groups <- unique(male_wrd[,1])
female_wrd <- gender_wrd %>%
group_by(id) %>%
filter(sex =='female')
female_groups <- unique(female_wrd[,1])
male_only <- anti_join(male_groups,female_groups)
female_only <- anti_join(female_groups,male_groups)
male_lines <- spooky %>%
filter(id %in% male_only$id)
female_lines <- spooky %>%
filter(id %in% female_only$id)
get_sentiments('nrc')
male_wrd <- unnest_tokens(male_lines, word, text)
female_wrd <- unnest_tokens(female_lines, word, text)
male_sentiments <- inner_join(male_wrd, get_sentiments('nrc'), by = "word")
female_sentiments <- inner_join(female_wrd, get_sentiments('nrc'), by = "word")
male_sentiment_frequency <- count(male_sentiments, sentiment, author)
male_tf_idf    <- bind_tf_idf(male_sentiment_frequency, sentiment, author, n)
female_sentiment_frequency <- count(female_sentiments, sentiment, author)
female_tf_idf    <- bind_tf_idf(female_sentiment_frequency, sentiment, author, n)
male_tf_idf$diff <- male_tf_idf$tf-female_tf_idf$tf
ggplot(male_tf_idf) +
geom_col(aes(sentiment, diff, fill = author),position = "dodge") +
labs(x = NULL, y = "Difference in TF values") +
theme(axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Male - Female Sentiment Frequency Difference")
ggsave('gender_sentiments.png',path='../figs')
pronoun_wrd = unnest_tokens(spooky, word, text) %>%
mutate(single = (word == 'he'| word == 'him'| word == 'his'|word =='she' |word == 'her'|word == 'hers' |word =='I'|word =='me'|word =='my'|word=='mine')) %>%
mutate(plural = (word == 'we'|word=='us'|word=='our'|word=='ours'|word=='they'|word=='them'|word=='their'|word=='theirs')) %>%
unite(pronoun, single, plural) %>%
mutate(pronoun = fct_recode(as.factor(pronoun), single = "TRUE_FALSE", plural = "FALSE_TRUE", na = "FALSE_FALSE")) %>%
filter(pronoun != "na")
pronoun_frequency <- count(pronoun_wrd, pronoun, author)
pronoun_tf_idf    <- bind_tf_idf(pronoun_frequency, pronoun, author, n)
ggplot(pronoun_tf_idf) +
geom_col(aes(pronoun, tf, fill = author),position = "dodge") +
labs(x = NULL, y = "TF values") +
theme(legend.position = "top", axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Pronoun Frequency(Single/Plural)")
ggsave('pronoun_frequency.png',path='../figs')
single_wrd <- pronoun_wrd %>%
group_by(id) %>%
filter(pronoun =='single')
single_groups <- unique(single_wrd[,1])
plural_wrd <- pronoun_wrd %>%
group_by(id) %>%
filter(pronoun =='plural')
plural_groups <- unique(plural_wrd[,1])
single_only <- anti_join(single_groups,plural_groups)
plural_only <- anti_join(plural_groups,single_groups)
single_lines <- spooky %>%
filter(id %in% single_only$id)
plural_lines <- spooky %>%
filter(id %in% plural_only$id)
get_sentiments('nrc')
single_wrd <- unnest_tokens(single_lines, word, text)
plural_wrd <- unnest_tokens(plural_lines, word, text)
single_sentiments <- inner_join(single_wrd, get_sentiments('nrc'), by = "word")
plural_sentiments <- inner_join(plural_wrd, get_sentiments('nrc'), by = "word")
single_sentiment_frequency <- count(single_sentiments, sentiment, author)
single_tf_idf    <- bind_tf_idf(single_sentiment_frequency, sentiment, author, n)
plural_sentiment_frequency <- count(plural_sentiments, sentiment, author)
plural_tf_idf    <- bind_tf_idf(plural_sentiment_frequency, sentiment, author, n)
single_tf_idf$diff <- single_tf_idf$tf-plural_tf_idf$tf
ggplot(single_tf_idf) +
geom_col(aes(sentiment, diff, fill = author),position = "dodge") +
labs(x = NULL, y = "Difference in TF values") +
theme(axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Single - Plural Sentiment Frequency Difference")
ggsave('pronoun_sentiments.png',path='../figs')
lights_wrd = unnest_tokens(spooky, word, text) %>%
mutate(light = (word == 'light'|word =='bright'|word=='luminous'|word=='rich'|word=='shiny'|word=='sunny'|word=='sun'|word=='burnished'|word=='flashing'|word=='glowing'|word=='shining'|word=='radiant'|word=='cloudless'|word=='polished'|word=='lustrous'|word=='white')) %>%
mutate(dark = (word == 'dark'|word=='black'|word=='grey'|word=='gray'|word=='dim'|word=='darkened'|word=='dingy'|word=='dull'|word=='foggy'|word=='gloomy'|word=='shady'|word=='shadow'|word=='somber')) %>%
unite(light, light, dark) %>%
mutate(light = fct_recode(as.factor(light), light = "TRUE_FALSE", dark = "FALSE_TRUE", na = "FALSE_FALSE")) %>%
filter(light != "na")
light_frequency <- count(light_wrds, light, author)
lights_wrd = unnest_tokens(spooky, word, text) %>%
mutate(light = (word == 'light'|word =='bright'|word=='luminous'|word=='rich'|word=='shiny'|word=='sunny'|word=='sun'|word=='burnished'|word=='flashing'|word=='glowing'|word=='shining'|word=='radiant'|word=='cloudless'|word=='polished'|word=='lustrous'|word=='white')) %>%
mutate(dark = (word == 'dark'|word=='black'|word=='grey'|word=='gray'|word=='dim'|word=='darkened'|word=='dingy'|word=='dull'|word=='foggy'|word=='gloomy'|word=='shady'|word=='shadow'|word=='somber')) %>%
unite(light, light, dark) %>%
mutate(light = fct_recode(as.factor(light), light = "TRUE_FALSE", dark = "FALSE_TRUE", na = "FALSE_FALSE")) %>%
filter(light != "na")
light_frequency <- count(lights_wrds, light, author)
lights_wrd = unnest_tokens(spooky, word, text) %>%
mutate(light = (word == 'light'|word =='bright'|word=='luminous'|word=='rich'|word=='shiny'|word=='sunny'|word=='sun'|word=='burnished'|word=='flashing'|word=='glowing'|word=='shining'|word=='radiant'|word=='cloudless'|word=='polished'|word=='lustrous'|word=='white')) %>%
mutate(dark = (word == 'dark'|word=='black'|word=='grey'|word=='gray'|word=='dim'|word=='darkened'|word=='dingy'|word=='dull'|word=='foggy'|word=='gloomy'|word=='shady'|word=='shadow'|word=='somber')) %>%
unite(light, light, dark) %>%
mutate(light = fct_recode(as.factor(light), light = "TRUE_FALSE", dark = "FALSE_TRUE", na = "FALSE_FALSE")) %>%
filter(light != "na")
light_frequency <- count(lights_wrd, light, author)
light_tf_idf    <- bind_tf_idf(light_frequency, light, author, n)
ggplot(light_tf_idf) +
geom_col(aes(light, tf, fill = author),position = "dodge") +
labs(x = NULL, y = "TF values") +
theme(axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Light vs Dark Frequency")
ggsave('lights_frequency.png',path='../figs')
light_wrd <- lights_wrd %>%
group_by(id) %>%
filter(light =='light')
light_groups <- unique(light_wrd[,1])
dark_wrd <- lights_wrd %>%
group_by(id) %>%
filter(light =='dark')
dark_groups <- unique(dark_wrd[,1])
light_only <- anti_join(light_groups,dark_groups)
dark_only <- anti_join(dark_groups,light_groups)
light_lines <- spooky %>%
filter(id %in% light_only$id)
dark_lines <- spooky %>%
filter(id %in% dark_only$id)
get_sentiments('nrc')
light_wrd <- unnest_tokens(light_lines, word, text)
dark_wrd <- unnest_tokens(dark_lines, word, text)
light_sentiments <- inner_join(light_wrd, get_sentiments('nrc'), by = "word")
dark_sentiments <- inner_join(dark_wrd, get_sentiments('nrc'), by = "word")
light_sentiment_frequency <- count(light_sentiments, sentiment, author)
light_tf_idf    <- bind_tf_idf(light_sentiment_frequency, sentiment, author, n)
dark_sentiment_frequency <- count(dark_sentiments, sentiment, author)
dark_tf_idf    <- bind_tf_idf(dark_sentiment_frequency, sentiment, author, n)
light_tf_idf$diff <- light_tf_idf$tf-dark_tf_idf$tf
ggplot(light_tf_idf) +
geom_col(aes(sentiment, diff, fill = author),position = "dodge") +
labs(x = NULL, y = "Difference in TF values") +
theme(axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(title = "Light - Dark Sentiment Frequency Difference")
ggsave('lights_sentiment.png',path='../figs')
features_all = list()
keypoints_all = list()
sift_feature_dir <- "../data/train-features/" # This will be modified for different data sets.
for (i in 1:2000){
file = sprintf("pet%i.jpg.sift.RData", i)
file_path = paste0(sift_feature_dir,file)
load(file_path)
features_all[[i]] = features
keypoints_all[[i]] = keypoints
}
features_all = do.call("rbind",features_all)
?kmeans
km.out = kmeans(features_all,1000,nstart=1,algorithm = "Lloyd")
closest.cluster <- function(x) {
cluster.dist <- apply(k.out$centers, 1, function(y) sqrt(sum((x-y)^2)))
return(which.min(cluster.dist)[1])
}
i=1
file = sprintf("pet%i.jpg.sift.RData", i)
file_path = paste0(sift_feature_dir,file)
setwd("~/GitHub/project-2-predictive-modelling-group-3/doc")
sift_feature_dir <- "../data/train-features/" # This will be modified for different data sets.
file = sprintf("pet%i.jpg.sift.RData", i)
file_path = paste0(sift_feature_dir,file)
load(file_path)
sift_feature_dir <- "../data/train-features/" # This will be modified for different data sets.
i=1
file = sprintf("pet%i.jpg.sift.RData", i)
file_path = paste0(sift_feature_dir,file)
load(file_path)
closest.cluster <- function(x) {
cluster.dist <- apply(k.out$centers, 1, function(y) sqrt(sum((x-y)^2)))
return(which.min(cluster.dist)[1])
}
load('100kmeans.rda')
clusters2 <- apply(features,1,closest.cluster)
clusters2
clustervec = [0]*100
clustervec = rep(0,100)
clustervec
length(clusters2)
for (j in 1:length(clusters2)):
for (j in 1:length(clusters2)){}
c = clusters2[j]
clustervec[c]+=1}
for (j in 1:length(clusters2)){}
c = clusters2[j]
clustervec[c] = clustervec[c]+ 1}
for (j in 1:length(clusters2)){
c = clusters2[j]
clustervec[c] = clustervec[c]+ 1}
clustervec
clustervec2 = rep(0,100)
rbind(clustervec,clustervec2)
cs = rbind(clustervec,clustervec2)
dim(cs)
